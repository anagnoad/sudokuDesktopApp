/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sudokudesktopapp;

import Logic.Users.Person;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.event.ListSelectionEvent;


/**
 * Custom JPanel class for the Log In panel.
 * It is used in the main application frame, in main panel.
 * @author Steve
 */
public class LogInPanel extends javax.swing.JPanel {

    /**
     * Default constructor.
     * Creates new form LogInPanel.
     */
    public LogInPanel(GUIHandler guiHandler) {
        this.myGuiHandler = guiHandler;
        initComponents();
        this.resultsToShare = new ArrayList<>(); // so as not to have null ptr exception
    }
    /**
     * Function that updates the JList values, according to search.
     */
    private void updateJList()
    {
        DefaultListModel<Person> model = new DefaultListModel<>();
        for(Person p : resultsToShare)
        {
            model.addElement(p);
        }
        resultsJList.setModel(model);
        System.out.println(resultsToShare);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        searchPanel = new javax.swing.JPanel();
        nicknameSearchInput = new javax.swing.JTextField();
        searchIconLabel = new javax.swing.JLabel();
        loginLabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsJList = new javax.swing.JList();

        setLayout(new java.awt.GridBagLayout());

        nicknameSearchInput.setText("nickname");
        nicknameSearchInput.setToolTipText("Enter nickname to search");
        nicknameSearchInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nicknameSearchInputActionPerformed(evt);
            }
        });

        searchIconLabel.setText("[icon here]");

        org.jdesktop.layout.GroupLayout searchPanelLayout = new org.jdesktop.layout.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(searchPanelLayout.createSequentialGroup()
                .add(searchIconLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(nicknameSearchInput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 205, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, searchPanelLayout.createSequentialGroup()
                .add(16, 16, 16)
                .add(searchPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(searchIconLabel)
                    .add(nicknameSearchInput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(searchPanel, gridBagConstraints);

        loginLabel.setFont(new java.awt.Font("Lucida Grande", 1, 22)); // NOI18N
        loginLabel.setText("Log In");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(loginLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jSeparator2, gridBagConstraints);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        resultsJList.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        resultsJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        resultsJList.setMinimumSize(new java.awt.Dimension(70, 50));
        resultsJList.setPreferredSize(new java.awt.Dimension(100, 100));
        resultsJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                resultsJListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(resultsJList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(jScrollPane1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Event handling for when the user searches for a particular nickname.
     * Searching personDB and updating the list.
     * @param evt 
     */
    private void nicknameSearchInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nicknameSearchInputActionPerformed
        // search nickname on the db and return results
        ArrayList<Person> results;
        results = this.myGuiHandler.searchByNickname(this.nicknameSearchInput.getText());
        if (results != null)
        {
            this.resultsToShare = results;
            updateJList();
        }
        else
        {
            this.resultsToShare = new ArrayList<>();
        }
    }//GEN-LAST:event_nicknameSearchInputActionPerformed

    /**
     * Event handling for when the user selects a value off the JList.
     * The user is logged in, and the logged in panel is set to visible.
     * @param evt 
     */
    private void resultsJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_resultsJListValueChanged
        ListSelectionEvent event = (ListSelectionEvent) evt;
        JList list = (JList) evt.getSource();
        
        Person person = (Person) list.getSelectedValue();
        this.myGuiHandler.login(person);
        this.myGuiHandler.hideLoginPanel();
        this.myGuiHandler.showLoggedInPanel();
    }//GEN-LAST:event_resultsJListValueChanged

    /**
     * Instance of the GUIHandler of the app.
     */
    private GUIHandler myGuiHandler;
    /**
     * ArrayList containing all Person objects, returned from the user's search.
     */
    private ArrayList<Person> resultsToShare;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel loginLabel;
    private javax.swing.JTextField nicknameSearchInput;
    private javax.swing.JList resultsJList;
    private javax.swing.JLabel searchIconLabel;
    private javax.swing.JPanel searchPanel;
    // End of variables declaration//GEN-END:variables
}
